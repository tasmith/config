#+TITLE:  Todd's Emacs Configuration File
#+AUTHOR: Todd Smith
#+EMAIL:  todd@tsmith.org

#+STARTUP: indent

Many of the large well-structured emacs configurations available
on the internet, like /prelude/ or /starter-kit/ are organized
as a directory of subdirectories each containing parts of the
configuration.  Since each of these parts is just executed in turn,
one-time, during initialization, there seems to be little reason
to prefer this organization over on single file being executed
from top to bottom.  A single file, even if 1000 lines long, is
easier to manage and maintain than 20 separate files each 50 lines long.

* Instructions

This is an org-mode file, so working with this file will require a
few [[http://www.orgmode.org][org-mode]] keys:

    - Shift + =tab= cycles between the outline and full text
    - The =tab= key opens/close a particular section

This is the *source* file for generating Emacs configuration file
`init.el'.  This file is generated by tangling this source file.
(Tangling is a concept from Knuth's literate programming.)  
Tangling is accomplished easily, use =C-c C-v t=.

This file should be in Emacs configuration directory (i.e. ~/.emacs.d).
Tangling this file will put `init.el' in this directory too, as it
should be.

Editing this file in Emacs will activate org-mode with it's vast 
capabilities, but controlling org-mode is quite easy.  

  | Key       | Function                                     |
  |-----------+----------------------------------------------|
  | TAB       | Open/Close hidden portion marked with ...    |
  | Shift-TAB | Cycle document between outline and full text |
  | C-c C-v t | Tangle file                                  |

The outline structure is controlled by the number of '*'s.
A top level outline heading starts with one '*' and a 
second level outline starts with '**' and so on.  Because this
document has a STARTUP directive of `indent' (see above), 
The headings are made prettier by indenting sub-headings
and hiding the display of the leading asterisks (but they
actually are there and can be edited to adjust the heading level.

This document also contains a few tables.  Org-mode table support
makes editing tables easy; it requires just a few basics:
  
    - A `|' character as the first non-whitespace character on a line
      starts a table.  
    - `|-' followed by TAB key will put in a horizontal divider
    - C-c inside the table will rebalance it
    - RETURN inside a table adds a new line

*REMEMBER* that after any changes to this file the actual `init.el' file
needs to be regenerated by =C-c C-v t=.

* Using org-mode literate programming for Emacs configuration

  I've tried Emacs /imenu/ mode within a single =init.el= file
  to enable easier navigation.  This approach, of a single =init.el=
  file has led me to reconsider using
  /org-mode/ with /babel/ to achieve the same goals.  This file is 
  *not* a =.emacs= file.  Unlike the approach taken by the newer
  /starter-kit/ configurations which have a small =init.el= file
  that loads the tangled elisp from a set of /org-mode/ files,
  this file is intended to be tangled once into an /elisp/ file.
  The /elisp/ file is not intended to ever be edited directly.
  Instead, this org-mode file is edited instead and then manually
  tangled once into a new /elisp/ file (with standard name `init.el')
  that will be subsequently loaded by Emacs during initialization.

  This file generates my Emacs configuration file, and expects a
  modern Emacs (at least version 23). This is written using Emacs 24.3
  on Mac OSX. (Although at some point I may want to try the recommended
  [[https://github.com/railwaycat/emacs-mac-port][Yamamoto Mitsuharu's version]].) The latest [[http://aquamacs.org/][Aquamacs]] sould work too
  if the recent package manager is installed.
  
* Warning

  Output a warning that the output is a generated file not to be edited.

#+NAME: warning
#+BEGIN_SRC emacs-lisp
  ;;; ------------------------------------------
  ;;; Do not edit this file.
  ;;; 
  ;;; This is a file generated, by tangling,
  ;;; from an original source file
  ;;;
  ;;;    ~/.emacs.d/init.org
  ;;;
  ;;; See the source file for instructions on
  ;;; how it should be edited and used to
  ;;; regenerate this file (it's easy).
  ;;; ------------------------------------------
#+END_SRC

* Older Emacs versions

   Emacs already comes bundled to edit most files, like Java and Ruby.
   However, some of the new stuff that I use isn't bundled, yet.

** Emacs version 23

    Since version 24 of Emacs, /elpa/ package managment has been included 
    in Emacs. This org-mode configuration can be used on version 23 of Emacs (e.g. 
    current Aquamacs) if one installs package management first.

* Globals
** Directory names

  The configuration will use a few global vars such as the names of
  the sub-directories in my =.emacs.d= . We set them here.  First,
  everything is stored under my Emacs directory, which should be
  =/Users/todd/.emacs.d=. In practice this may be a sym-link to
  a location like =/Users/todd/Projects/emacs/org-mode-based=.

#+BEGIN_SRC emacs-lisp
;; load-file-name should be "/Users/todd/.emacs.d/init.el"
(defvar my-emacs-dir (file-name-directory load-file-name)
  "The root dir of my emacs configuration.")
#+END_SRC

  The modules that I use that are not standard Emacs packages are
  stored in the =modules= sub-directory.

#+BEGIN_SRC emacs-lisp
(defvar my-modules-dir (expand-file-name "modules" my-emacs-dir)
  "The directory containing third party modules not using package system.")
#+END_SRC

  Although I don't really use /yasnippet/, I always have plans to
  start.  Reserve a sub-directory for the snippets/

#+BEGIN_SRC emacs-lisp
(defvar my-snippets-dir (expand-file-name "snippets" my-emacs-dir)
  "The directory containing my yasnippet bundles.")
#+END_SRC

  I don't like autosave files clutting up my directories so I need a
  place to put them.

#+BEGIN_SRC emacs-lisp
(defvar my-savefile-dir (expand-file-name "savefiles" my-emacs-dir)
  "The directory containing autosave files and history files.")
(unless (file-exists-p my-savefile-dir)
  (make-directory my-savefile-dir))
#+END_SRC

** Load Path

  Add third-party modules and my own stored in `my-modules-dir' to
  the `load-path'.

#+NAME: load-path
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path my-modules-dir)

  (defun add-subdirs-to-load-path (dir)
    "Add immediate non-hidden subdirs of DIR to load-path."
    (dolist (f (directory-files dir))
      (let ( (name (expand-file-name f dir)) )
        (when (and (file-directory-p name)
                   (not (string-equal (substring f 0 1) ".")))
          (add-to-list 'load-path name)))))

  (add-subdirs-to-load-path my-modules-dir)
#+END_SRC

** Customization variables

#+NAME: customization-file
#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/emacs-custom.el")
  (load custom-file)
#+END_SRC

* Packages
** Elpa and Mepa package repositories

I use the official /elpa/ repository and the alternative /mepa/ repository.
The following code adds /mepa/ to the list of package-archives to be consulted,
and establishes a subdirectory =elpa= for storing installed packages.

#+NAME: elpa-and-mepa
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("mepa" . "http://melpa.milkbox.net/packages/") t)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(setq package-user-dir (expand-file-name "elpa" my-emacs-dir))
(package-initialize)
#+END_SRC

The following function is used to insure that an expected package
is installed.

#+NAME: need-pkg
#+BEGIN_SRC emacs-lisp
  (defun us/ts6/need-pkg (pkg)
    (unless (package-installed-p pkg)
      (unless package-archive-contents
        (message "%s" "Missing package, refreshing package database ...")
        (package-refresh-contents)
        (message "%s" " done."))
      (message "%s" "Installing package ...")
      (package-install pkg)
      (message "%s" " done.")
      ))
#+END_SRC

** Prerequisit Packages and Modules
Here are some packages that are used here in this 

*** Dash

=dash.el=, a third-party module that isn't a package contains
a number of functions (all of which having names that start with a
dash character) that support sequence oriented operations, map,
filter, etc.

#+NAME: dash
#+BEGIN_SRC emacs-lisp
  ;; dash.el is in the modules sub-directory
  (require 'dash)
#+END_SRC

*** Diminish

#+NAME: diminish
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'diminish)
  (require 'diminish)
#+END_SRC

** My Package Selection
*** Auto completion

=auto-complete= is the recommended emacs completion package

#+NAME: auto-complete
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'auto-complete)
#+END_SRC

**** Python auto completion

To use it with python we will install the jedi package, but this 
has a couple of packages that are dependencies:

  - deferred :: simple asynchronous functions for emacs
  - epc :: an asynchronous RPC package for emacs
	  
#+NAME: deferred
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'deferred)
#+END_SRC

#+NAME: EPC
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'epc)
#+END_SRC

Now, to support the python side of the jedi, make sure we have the
virtualenv package.  

There seems to be a bug in this package 
when using the default python support of Emacs 24.  Normally, 
=virtualenv-workon= trys to start a python shell.  It does so by first
trying to switch to a running python shell buffer and then trys to
start a python shell with the first one of =py-shell=, =python-shell=,
and =run-python= that it finds.  Under Emacs 24, it uses the function
=run-python=.  The code for =virtualenv-workon= incorrectly calls =run-python=
with no arguments.  There are two possible workarounds: one, set the
customizable variable =virtualenv-workon-starts-python= to =nil= to 
prevent the default behavior of starting a python shell, and two, 
the workaround that we provide here, define a new function =python-shell=
that correctly invokes =run-python=.

Note that I usually keep my virtualenv's in `~/.virtualenv' rather than
`~/.virtualenvs' as is assumed by `virtualenv.el' so I explicitly set
the virtualenv-root here.

Consider using file `.dir-locals.el', see documentation for 
`virtualenv.el'.

#+NAME: virutalenv
#+BEGIN_SRC emacs-lisp
  (unless (fboundp 'python-shell)
  (defun python-shell () (run-python "python")))
  (us/ts6/need-pkg 'virtualenv)
  (eval-after-load "virtualenv"
    '(progn
       (setq virtualenv-root "~/.virtualenv")))
  (virtualenv-workon "py331")
#+END_SRC

=jedi.el= requires two executables to be available so that Emacs can
talk to the external Jedi program.  We assume that these have already
been installed in any virtualenv that we start before using =jedi.el=.

#+NAME: jedi
#+BEGIN_SRC emacs-lisp
  (message "%s" "Make sure that python packages `jedi' and `epc' have been installed before using jedi")
  (message "  %s" "Use: `pip install jedi; pip install epc' inside the virtualenv")
  
  (us/ts6/need-pkg 'jedi)
  (eval-after-load "jedi"
    '(progn
       (define-key jedi-mode-map   (kbd "<C-tab>") 'jedi:key-complete)
       (define-key jedi-mode-map   (kbd "C-.") 'jedi:key-goto-definition)
       (define-key jedi-mode-map   (kbd "C-c d") 'jedi:key-show-doc)
       (define-key jedi-mode-map   (kbd "C-c r") 'jedi:key-related-names)
       ))
  
  (add-hook 'python-mode-hook 'jedi:setup)
#+END_SRC

**** IPython

To provide auto-completion in Emacs binding EIN (Emacs IPython
Notebook) when using IPython, see =ein:jedi-setup= in the EIN
manual.  It's possible to run auto-completion in both =jedi.el= and
and EIN at the same time.

**** Clojure nREPL auto completion

#+NAME: ac-nrepl
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'ac-nrepl)
#+END_SRC   

*** ace-jump-mode

I'm not sure how =ace-jump-mode-pop-mark= works, but I've 
enabled a key-binding below so I can try it out too.

#+NAME: ace-jump-mode
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'ace-jump-mode)
  (define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
  (define-key global-map (kbd "C-x SPC") 'ace-jump-mode-pop-mark)
#+END_SRC

*** ack-and-a-half

#+NAME: ack-and-a-half
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'ack-and-a-half)
  (defalias 'ack 'ack-and-a-half)
  (defalias 'ack-same 'ack-and-a-half-same)
  (defalias 'ack-find-file 'ack-and-a-half-find-file)
  (defalias 'ack-find-file-same 'ack-and-a-half-find-file-same)
#+END_SRC

*** TeX and Latex

**** auctex

#+NAME: auctex
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'auctex)
  
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  
  ;; ask each time I open a new tex file for the master file
  (setq-default TeX-master nil)
  
  (add-hook 'LaTeX-mode-hook 'visual-line-mode)
  ; or (add-hook 'LaTeX-mode-hook 'auto-fill-mode)
  
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (setq reftex-plug-into-AUCTeX t)
  
  (setq TeX-PDF-mode t)
#+END_SRC

*** Clojure

#+NAME: auctex
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'clojure-mode)
  (us/ts6/need-pkg 'clojure-test-mode)
  (us/ts6/need-pkg 'nrepl)
#+END_SRC

*** CoffeeScript and IcedCoffeeScript

#+NAME: coffee-mode
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'coffee-mode)
#+END_SRC

*** CSS

css-mode is a built-in mode in Emacs 24

*** Erlang

I don't have Erlang installed so I won't be needing this (yet), setting
tangle to no.

#+NAME: erlang
#+BEGIN_SRC emacs-lisp :tangle no
  (us/ts6/need-pkg 'erlang)
  (setq load-path (cons  "/usr/local/otp/lib/tools-<ToolsVer>/emacs"
                         load-path))
  (setq erlang-root-dir "/usr/local/otp")
  (setq exec-path (cons "/usr/local/otp/bin" exec-path))
#+END_SRC
*** Expand Region

#+NAME: expand-region
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'expand-region)
  (define-key global-map (kbd "C-=") 'er/expand-region)
#+END_SRC

*** Exec Path From Shell

I use this for [[Mac OS X]]

#+NAME: exec-path
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'exec-path-from-shell)
#+END_SRC

*** Cucumber

Package =feature-mode= support editing Gherkin (Cucumber) user stories.

In order to get goto-step-definition to work, you must install the
ruby_parser gem (version 2.0.x). For example:

#+BEGIN_EXAMPLE shell
    gem install ruby_parser --version=2.0.5
#+END_EXAMPLE

(be sure and use the ruby-interpreter that emacs will use based on
`exec-path')

#+NAME: cucumber
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'feature-mode)
  (setq feature-default-language "en")  ; set english as default
  (add-to-list 'auto-mode-alist '("\.feature$" . feature-mode))
#+END_SRC

*** Flycheck

Flycheck (an improved flymake) does on-the-fly syntax checking.  It is
not supported on Emacs 23!

Flycheck has built-in sytax checking for many languages:

      - CoffeeScript
      - CSS
      - Elixir
      - Emacs Lisp
      - Erlang
      - Go
      - Haml
      - HTML
      - Javascript
      - JSON
      - Lua
      - Perl
      - PHP
      - Python
      - Ruby
      - Rust
      - RST (ReStructuredText)
      - Sass
      - SCSS
      - Shell scripts (POSIX Shell, Bash and Zsh)
      - TeX/LaTeX
      - XML
        
        
The readme on flycheck's github page states that most checkers have
dependencies against external tools that perform the checking. Use
C-c ! ? to see what a checker needs, e.g. C-c ! ? python-pylint.
I'll have to experiment with this.

#+NAME: flycheck
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'flycheck)
  (add-hook 'after-init-hook #'global-flycheck-mode)
#+END_SRC

*** Flyspell

On-the-fly spell checking.

#+NAME: flyspell
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'flyspell)
  (require 'flyspell)
  ; aspell instead of ispell
  (setq ispell-program-name "aspell"
      ispell-extra-args '("--sug-mode=ultra"))
  (add-hook 'text-mode-hook
            (function (lambda ()
                        (when (executable-find ispell-program-name)
                          (flyspell-mode)))))
  (add-hook 'tex-mode-hook
            (function (lambda () (setq ispell-parser 'tex))))
  (define-key global-map (kbd "C-c j")
                         'flyspell-check-previous-highlighted-word)
#+END_SRC

*** Gist

#+NAME: gist
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'gist)
#+END_SRC

*** Git

#+NAME: git
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'magit)
  (us/ts6/need-pkg 'git-commit-mode)
  (us/ts6/need-pkg 'gitconfig-mode)
  (us/ts6/need-pkg 'gitignore-mode)
#+END_SRC

*** Graphviz Dot

#+NAME: graphviz
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'graphviz-dot-mode)
#+END_SRC

*** Groovy

#+NAME: groovy
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'groovy-mode)
#+END_SRC

*** Haml

#+NAME: haml
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'haml-mode)
#+END_SRC

*** Handlebars

#+NAME: handlebars
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'handlebars-mode)
#+END_SRC

*** Haskell

#+NAME: haskell
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'haskell-mode)
#+END_SRC

*** Helm

This helm configuration comes from Emacs Prelude project.

#+NAME: helm
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'helm)
  (us/ts6/need-pkg 'helm-projectile)

  (require 'helm-misc)
  (require 'helm-projectile)

  (defun helm-prelude ()
    "Preconfigured `helm'."
    (interactive)
    (condition-case nil
      (if (projectile-project-root)
          ;; add project files and buffers when in project
          (helm-other-buffer '(helm-c-source-projectile-files-list
                               helm-c-source-projectile-buffers-list
                               helm-c-source-buffers-list
                               helm-c-source-recentf
                               helm-c-source-buffer-not-found)
                             "*helm prelude*")
        ;; otherwise fallback to helm-mini
        (helm-mini))
      ;; fall back to helm mini if an error occurs (usually in projectile-project-root)
      (error (helm-mini))))
  #+END_SRC

*** HTMLize

#+NAME: htmlize
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'htmlize)
#+END_SRC

*** Jinja2

#+NAME: jinja2
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'jinja2-mode)
#+END_SRC

*** js-comint

#+NAME: js-comint
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'js-comint)
  (add-hook 'js2-mode-hook
            (function (lambda () 
               (local-set-key "\C-x\C-e" 'js-send-last-sexp)
               (local-set-key "\C-\M-x" 'js-send-last-sexp-and-go)
               (local-set-key "\C-cb" 'js-send-buffer)
               (local-set-key "\C-c\C-b" 'js-send-buffer-and-go)
               (local-set-key "\C-cl" 'js-load-file-and-go)
               )))
#+END_SRC

*** Javascript and JSON

#+NAME: js2-mode
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'js2-mode)
  (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
#+END_SRC

*** Less

See documentation in less.el before enabling this.

#+NAME: less-css-mode :tangle no
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'less-css-mode)
#+END_SRC

*** Lua

#+NAME: lua-mode
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'lua-mode)
#+END_SRC

*** Markdown

#+NAME: markdown-mode
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'markdown-mode)
#+END_SRC

*** Mustache

#+NAME: mustache-mode
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'mustache-mode)
#+END_SRC

*** Line Numbers

#+NAME: nlinum
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'nlinum)
#+END_SRC

*** Paredit

#+NAME: paredit
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'paredit)
  (us/ts6/need-pkg 'paredit-menu)
#+END_SRC

*** PHP

#+NAME: php-mode
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'php-mode)
#+END_SRC

*** Projectile

The projectile project management mode.

#+NAME: projectile
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'projectile)
  (require 'projectile)
  (setq projectile-cache-file (expand-file-name  "projectile.cache" my-savefile-dir))
  (projectile-global-mode t)
  (diminish 'projectile-mode "Prjl")
#+END_SRC

*** Rainbow Mode

#+NAME: rainbow-mode
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'rainbow-mode)
#+END_SRC

*** Redo

#+NAME: redo+
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'redo+)
#+END_SRC

*** Sass

#+NAME: sass-mode
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'sass-mode)
#+END_SRC

*** Slim

#+NAME: slim-mode
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'slim-mode)
#+END_SRC

*** Smex

#+NAME: smex
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'smex)
#+END_SRC

*** Undo Tree

#+NAME: undo-tree
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'undo-tree)
#+END_SRC

*** Volatile Highlights

#+NAME: volatile-highlights
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'volatile-highlights)
  (require 'volatile-highlights)
  (volatile-highlights-mode t)
  (diminish 'volatile-highlights-mode)
  
  ;; note - this should be after volatile-highlights is required
  ;; add the ability to copy and cut the current line, without marking it
  (defadvice kill-ring-save (before slick-copy activate compile)
    "When called interactively with no active region, copy a single line instead."
    (interactive
     (if mark-active (list (region-beginning) (region-end))
       (message "Copied line")
       (list (line-beginning-position)
             (line-beginning-position 2)))))
  
  (defadvice kill-region (before slick-cut activate compile)
    "When called interactively with no active region, kill a single line instead."
    (interactive
     (if mark-active (list (region-beginning) (region-end))
       (list (line-beginning-position)
             (line-beginning-position 2)))))
#+END_SRC

*** Yaml

#+NAME: yaml-mode
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'yaml-mode)
#+END_SRC

*** Yasnippet

#+NAME: yasnippet
#+BEGIN_SRC emacs-lisp
  (us/ts6/need-pkg 'yasnippet)
  (require 'yasnippet)
  (yas-global-mode 1)
#+END_SRC

** Built-In Packages and Modules
*** Midnight
Clean up obsolete buffers automatically:

#+NAME: midnight
#+BEGIN_SRC emacs-lisp
(require 'midnight)
#+END_SRC

*** Show Paren Mode
Provides subtle highlighting of matching parens.
This is a global-mode.

#+NAME: show-paren-mode
#+BEGIN_SRC emacs-lisp
  (require 'paren)
  (setq show-paren-style 'parenthesis)
  (show-paren-mode +1)
#+END_SRC

*** Ediff
Ediff, but don't start another frame

#+BEGIN_SRC emacs-lisp
  (require 'ediff)
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+END_SRC

*** Uniquify Buffer Names
Provide better buffer names when they are not unique.

#+NAME: uniquify
#+BEGIN_SRC emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)
  (setq uniquify-separator "/")
  (setq uniquify-after-kill-buffer-p t)    ; rename after killing uniquified
  (setq uniquify-ignore-buffers-re "^\\*") ; don't muck with special buffers
#+END_SRC

*** Tramp
Tramp is a major mode for accessinng remote files with ssh.  It can
also be used to access local files by using the `sudo' method.
Tramp is very easy to use:

#+BEGIN_EXAMPLE
C-x C-f /remotehost:filename  RET (or /method:user@remotehost:filename)
#+END_EXAMPLE

See the documentation at [[http://www.gnu.org/software/tramp/][tramp]].

There are a few issues with tramp mentioned on the Emacs wiki.  In
particular, the zsh shell can cause problems; that is why I've 
included a workaround below.

#+NAME: tramp
#+BEGIN_SRC emacs-lisp
  (require 'tramp)
  (setq tramp-default-method "ssh")
  (eval-after-load 'tramp '(setenv "SHELL" "/bin/bash"))
#+END_SRC

*** Saveplace

#+NAME: saveplace
#+BEGIN_SRC emacs-lisp
  (require 'saveplace)
  (setq save-place-file (expand-file-name "saveplace" my-savefile-dir))
  (setq-default save-place t)            ;; activate it for all buffers
#+END_SRC

*** Windmove

#+NAME: windmove
#+BEGIN_SRC emacs-lisp
  ;; use shift + arrow keys to switch between visible buffers
  (require 'windmove)
  (windmove-default-keybindings)
#+END_SRC

*** Ido Mode

#+NAME: ido
#+BEGIN_SRC emacs-lisp
  ;; ido-mode
  (require 'ido)
  (setq ido-enable-prefix nil
        ido-enable-flex-matching t
        ido-create-new-buffer 'always
        ido-use-filename-at-point 'guess
        ido-max-prospects 10
        ido-save-directory-list-file (expand-file-name "ido.hist" my-savefile-dir)
        ido-default-file-method 'selected-window)
  (ido-mode +1)
#+END_SRC

*** Expand Region

#+NAME: expand-reqion
#+BEGIN_SRC emacs-lisp 
  (require 'expand-region)
#+END_SRC

*** Bookmarks

#+NAME: bookmark
#+BEGIN_SRC emacs-lisp
  (require 'bookmark)
  (setq bookmark-default-file (expand-file-name "bookmarks" my-savefile-dir)
        bookmark-save-flag 1)
#+END_SRC

*** Whitespace 
Configigure =whitespace=, a library that highlights unwanted whitespace
=Whitespace= provides commands to clean up some whitespace problems, like
trailing blank lines. See =whitespace-cleanup=.

#+NAME: whitespace
#+BEGIN_SRC emacs-lisp
(require 'whitespace)
(setq whitespace-line-column 90) ;; limit line length
(setq whitespace-style '(face tabs empty trailing lines-tail))
(add-hook 'text-mode-hook 'whitespace-mode)
#+END_SRC

*** Regex Builder

Try =M-x re-builder= to buid regular expressions.  Unfortunately,
it's still not PCRE.

#+NAME: re-builder
#+BEGIN_SRC emacs-lisp
  (require 're-builder)
  (setq reb-re-syntax 'string)
#+END_SRC

*** Eshell

#+NAME: eshell
#+BEGIN_SRC emacs-lisp
  (require 'eshell)
  (setq eshell-directory-name (expand-file-name "eshell" my-savefile-dir))
#+END_SRC

* Environment
** Exec Path

Set $MANPATH, $PATH and exec-path my shell's settings, but only on OS X.
Other environment variables can also be set
(see [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell readme]]),
but I'm not doing that here.

#+NAME: exec paths
#+BEGIN_SRC emacs-lisp
  (cond
   ( (memq window-system '(ns mac))
     (exec-path-from-shell-initialize))
   ( (memq window-system '(w32 pc))
     (message "Running on MS-Windows, not sure how to set exec-path"))
   ( t
     (message "In a terminal or x, should inherit proper exec-path")))
#+END_SRC

* Visual Effects

#+NAME: cursor
#+BEGIN_SRC emacs-lisp
  ;; turn off blinking cursor
  (blink-cursor-mode -1)
  ;; highlight the current line
  (global-hl-line-mode +1)
#+END_SRC

#+NAME: startup screen
#+BEGIN_SRC emacs-lisp
  ;; disable startup screen
  (setq inhibit-startup-screen t)
  ;; open project directory
  (find-file "~/Projects")
#+END_SRC

#+NAME: mode line and tool bar
#+BEGIN_SRC emacs-lisp
  ;; turn off tool-bar
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
  ;; some useful information
  (line-number-mode t)
  (column-number-mode t)
  (size-indication-mode t)
  (setq frame-title-format '("" "%f"))
#+END_SRC
  
#+NAME: full screen
#+BEGIN_SRC emacs-lisp  
  ;; full screen on Mac OS X
  (when (eq system-type 'darwin)
    ;;(set-frame-parameter nil 'fullscreen 'fullboth)
    (setq initial-frame-alist '((top . 1) (left . 1) (width . 200) (height . 56))))
#+END_SRC

* File Handling

Store all backup and autosave files in the tmp dir. Buffers for files
that change outside of Emacs are reverted automatically.  Remember
location in saved files with =saveplace=.

#+NAME: backups and autosave
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
(global-auto-revert-mode t)
#+END_SRC

* Editor

#+NAME: no tabs
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)   ;; don't use tabs to indent
  (setq-default tab-width 8)            ;; but maintain correct appearance
  (delete-selection-mode t)             ;; keypress deletes selection 
#+END_SRC

#+NAME: hippie expand
#+BEGIN_SRC emacs-lisp
;; hippie expand is dabbrev expand on steroids
(setq hippie-expand-try-functions-list '(try-expand-dabbrev
                                         try-expand-dabbrev-all-buffers
                                         try-expand-dabbrev-from-kill
                                         try-complete-file-name-partially
                                         try-complete-file-name
                                         try-expand-all-abbrevs
                                         try-expand-list
                                         try-expand-line
                                         try-complete-lisp-symbol-partially
                                         try-complete-lisp-symbol))
#+END_SRC

#+BEGIN_SRC 
;; smart pairing for all
(electric-pair-mode t)

;; auto-completion in minibuffer
(icomplete-mode +1)

(set-default 'imenu-auto-rescan t)

;; enable narrowing commands
(put 'narrow-to-region 'disabled nil)
(put 'narrow-to-page 'disabled nil)
(put 'narrow-to-defun 'disabled nil)

;; enabled change region case commands
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)

;; dired - reuse current buffer by pressing 'a'
(put 'dired-find-alternate-file 'disabled nil)

;; abbrev config
(add-hook 'text-mode-hook 'abbrev-mode)

;; make a shell script executable automatically on save
(add-hook 'after-save-hook
          'executable-make-buffer-file-executable-if-script-p)


(setq semanticdb-default-save-directory
      (expand-file-name "semanticdb" my-savefile-dir))

;; sensible undo
(global-undo-tree-mode)
(diminish 'undo-tree-mode)

;; enable winner-mode to manage window configurations
(winner-mode +1)

#+END_SRC
* Misc
** idomenu
* Global Key Bindings

  | key                    | function                      | notes |
  |------------------------+-------------------------------+-------|
  | C-c SPC                | ace-jump-word-mode            |       |
  | C-u C-c SPC            | act-jump-char-mode            |       |
  | C-u C-u C-c SPC        | act-jump-line-mode            |       |
  | C-x SPC                | act-jump-mode-pop-mark        |       |
  |------------------------+-------------------------------+-------|
  | M-x ack                | ack-and-a-half                |       |
  | M-x ack-same           | ack-and-a-half-same           |       |
  | M-x ack-find-file      | ack-and-a-half-find-file      |       |
  | M-x ack-find-file-same | ack-and-a-half-find-file-same |       |
  |------------------------+-------------------------------+-------|
  | C-=                    | er/expand-region              |       |
  | C-u C-=                | er/contract-region            |       |
  |------------------------+-------------------------------+-------|
  | M-/                    | hippie-expand                 |       |
  |------------------------+-------------------------------+-------|
  |                        |                               |       |




* Technical Artifacts

  Before you can build this on a new system, make sure that you put
  the cursor over any of these properties, and hit: =C-c C-c=

#+DESCRIPTION: A literate programming version of my Emacs Initialization script, loaded by the .emacs file.
#+PROPERTY:    results silent
#+PROPERTY:    tangle yes
#+PROPERTY:    eval no-export
#+PROPERTY:    comments no
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
