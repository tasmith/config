#+TITLE: Todd's Emacs Configuration
#+OPTIONS: toc:4 h:4
#+STARTUP: showeverything
#+PROPERTY: header-args:emacs-lisp   :tangle "~/.emacs.d/todd.el"

* About this file

This file is my personal Emacs configuration file. Written as an org mode literate
program, this file must be tangled with the emacs command =M-x org-bable-tangle= 
(=C-c C-v t=) to generate the actual file =todd.el=, 
which is symlinked to the name =init.el= in my =~/.emacs.d= directory.

** References and Thanks

My configuration is greatly influenced by the numerous clever ideas incorporated
in many other Emacs user's configuration files.

  * [[https://raw.githubusercontent.com/sachac/.emacs.d/gh-pages/Sacha.org][Sacha Chua's Emacs Configuration]]
  * Samuel Barreto's [[https://sam217pa.github.io/2016/09/23/keybindings-strategies-in-emacs/][Keybinding Strategies in Emacs]] and [[https://sam217pa.github.io/2016/08/30/how-to-make-your-own-spacemacs/][Make your own Spacemacs]]
  * Aaron Bieber's [[https://blog.aaronbieber.com/2016/11/24/org-capture-from-anywhere-on-your-mac.html][Org Capture from Anywhere on Your Mac]]
  * Filipe Silva's [[https://github.com/ninrod/dotfiles/blob/master/emacs/boot.org][Ninrod Emacs Configuration]]
  * [[http://emacs-bootstrap.com/][Emacs Bootstrap]]

* Base configuration

** First a bit of information about the file and me

#+BEGIN_SRC emacs-lisp :padline no
;;; emacs configuration        -*- no-byte-compile: t -*-
;;; This file is a generated file, so do not edit this file.
;;; The actual configuration is stored in the source file 
;;; for this file, see `~/.emacs.d/todd.org'.

(setq user-full-name "Todd Smith")
(load "~/.emacs-secrets" t)  ;; not on github...I hope!
#+END_SRC

** Emacs package system

I use the package system extensively and the =use-package= command to
install, configure, and initialize the packages in my Emacs setup. There
are a few steps to prepare for it.

*** Package sources

For better security, I use =https= URL's for all of my package sources now.

#+BEGIN_SRC emacs-lisp
(package-initialize)
(setq package-archives '(("org"   . "https://orgmode.org/elpa/")
                         ("elpy"  . "https://jorgenschaefer.github.io/packages/")
			 ("gnu"   . "https://elpa.gnu.org/packages/")
			 ("melpa" . "https://melpa.org/packages/")))
#+END_SRC

*** Use package

John Wiegley's =use-package= is a great way to keep configuration 
of installed packages organized. First, make sure it is installed, 
and install packages =diminish= and =bind-key= which are dependencies
for use package.

#+BEGIN_SRC emacs-lisp
(when (not package-archive-contents)
  (package-refresh-contents))
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(use-package diminish)
(use-package bind-key)
#+END_SRC

Initialize a few =use-package= settings.

#+BEGIN_SRC emacs-lisp
(setq use-package-verbose t
      use-package-always-ensure t)
#+END_SRC

=use-package.el= is no longer needed at runtime, according to its documentation.

#+BEGIN_SRC emacs-lisp
(eval-when-compile
  (require 'use-package))
#+END_SRC

** Core Settings

*** Emacs customize system

I don't want customize settings, which are generated by the =customize=
commands of Emacs written in my init.el file so I provide an explicit 
place for them to go. This is essential because my init.el file is 
overwritten each time I tangle this file to generate it.

#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/custom-settings.el")
#+END_SRC

*** UTF-8

Use UTF-8 /everywhere/.

#+BEGIN_SRC emacs-lisp
(set-charset-priority 'unicode)
(setq locale-coding-system   'utf-8)
(set-terminal-coding-system  'utf-8)
(set-keyboard-coding-system  'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system        'utf-8)
(setq default-process-coding-system '(utf-8-unix . utf-8-unix))
#+END_SRC

*** Simple Customizations

#+BEGIN_SRC emacs-lisp
  (setq confirm-kill-emacs                  'y-or-n-p
        confirm-nonexistent-file-or-buffer  t
        save-interprogram-paste-before-kill t
        mouse-yank-at-point                 t

        ;; http://ergoemacs.org/emacs/emacs_stop_cursor_enter_prompt.html
        minibuffer-prompt-properties '(read-only t 
                                                 point-entered minibuffer-avoid-prompt
                                                 face minibuffer-prompt))
#+END_SRC

*** PATH

#+BEGIN_SRC emacs-lisp
  (setq exec-path (append exec-path '("/usr/local/bin/")))
#+END_SRC

*** Emacs' files and directories

#+BEGIN_SRC emacs-lisp
(defconst my-data-dir  (expand-file-name "home/" user-emacs-directory))
#+END_SRC

*** Bookmarks

#+BEGIN_SRC emacs-lisp
  (defconst my-bookmark-default-file  (expand-file-name "bookmarks" user-emacs-directory))
  (setq bookmark-save-flag     t
        bookmark-default-file  my-bookmark-default-file)
#+END_SRC

*** Backups

By default, Emacs saves backup files in the current directory and, without
additional configuration, a backup for file =shopping= is named =shopping~=.
Emacs is the source of all of these files with tildies at the end of their names.
Here I configure Emacs to save all backups in one place. This has three disadvantages:

  - Files are no longer organized by the sensitivity of the data they hold. Previously,
    if sensitive data was being stored in a directory it's Emacs backups were co-located
    in the same directory. Making management of sensitive data a bit easier.
  - All Emacs backups will now consume storage on a single volume, unrelated to where 
    the original data was being stored.
  - Backups are now hidden away in a directory that I am likely to look at infrequently.

These disadvantages are relatively minor and are outweighed, in my mind, by the advantage
of maintaining cleaner directories of just the files that I am working with.

#+BEGIN_SRC emacs-lisp
  (defconst my-backup-dir (expand-file-name "backups/" user-emacs-directory))
  (defconst my-auto-save-dir (expand-file-name "auto-save-list/" user-emacs-directory))

  (setq backup-directory-alist   `(("." . ,my-backup-dir))
        delete-old-versions      -1
        version-control          t     ; number the backup files
        vc-make-backup-file      t     ; make backups for files under vc
        auto-save-file-name-transforms  `((".*" ,my-auto-save-dir t)))
        history-length           1000
#+END_SRC

*** History

#+BEGIN_SRC emacs-lisp
  (setq savehist-file   (expand-file-name "savehist" user-emacs-directory)
        history-length  500
        savehist-additional-variables '(kill-ring search-ring regexp-search-ring))
#+END_SRC

*** Load path

Outside of the package system, I can add Emacs lisp functions in 
a directory that I add to Emacs load path.

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/elisp")
#+END_SRC

*** Byte compiling

#+BEGIN_SRC emacs-lisp
(use-package auto-compile
  :config (auto-compile-on-load-mode)
  :init (setq load-prefer-newer t))
#+END_SRC

*** Civilized Emacs!

The most rudamentary requirements for text editing (but they can be overridden of course).

First deal with some whitespace issues:

  * Tell Emacs that sentences may end in a period followed by a single space.
  * Make sure saved files end in a newline.
  * Indentation shouldn't insert tabs.
  * Delete trailing whitespace from lines before saving.

#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil
        require-final-newline     t
        indent-tabs-mode          nil)
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

Tweak the user interface to my liking.

  * No visible flashing, I prefer the beeps.
  * Reveal the cursor locations for non-selected windows (different shaped cursor)
  * Show the region in other windows
  * I've read the startup message thousands of times by now so turn it off.
  * Fringes, I'm not sure about. Trying out a new setting.
  * Save some space by hiding the tool-bar, no point in hiding the menu (most of the time).
  * Scroll bars, sometimes I like them sometimes I don't. They can stay in for now.

#+BEGIN_SRC emacs-lisp
  (setq visible-bell                   nil
        cursor-in-non-selected-windows t
        highlight-nonselected-windows  t
        inhibit-startup-message        t
        fringes-outside-margins        t)

  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
#+END_SRC

Seeing matching parentheses is /very/ helpful while programming.

#+BEGIN_SRC emacs-lisp 
  (show-paren-mode 1)
#+END_SRC

Help windows are selected automatically so that I can close them with just a 
single key press (=q=) and get my windows back.

#+BEGIN_SRC emacs-lisp
  (setq help-window-select t)
#+END_SRC

* General configuration

** Elisp libraries

#+BEGIN_SRC emacs-lisp
(use-package dash)
#+END_SRC 

** Appearance 

** Splash Screen

Just like the Spacemacs dashboard!

#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :init
  (setq dashboard-banner-logo-title "Welcome to Emacs"
        dashboard-startup-banner 'logo)
  :config
  ;; (add-to-list 'dashboard-items '(agenda) t)
  (add-hook 'dashboard-mode-hook 
            (lambda () (set (make-local-variable 'mouse-1-click-follows-link) nil)))
  (dashboard-setup-startup-hook))
#+END_SRC

*** Themes

Switching themes can be troublesome; perhaps this package will help.

Now for some themes.

#+BEGIN_SRC emacs-lisp

#+END_SRC

** Time in the modeline

#+begin_src emacs-lisp
(display-time-mode 1)
#+end_src

* Packages

** Winner mode - undo and redo window configuration

=winner-mode= lets you use =C-c <left>= and =C-c <right>= 
to switch between window configurations. 
This is handy when something has popped up a buffer that you want to look at 
briefly before returning to whatever you were working on. 
When you're done, press =C-c <left>=.

#+BEGIN_SRC emacs-lisp
(use-package winner)
#+END_SRC

** Eww

#+BEGIN_SRC emacs-lisp
(use-package eww
  :init
  (setq browse-url-browser-function
        '((".*google.*maps.*" . browse-url-generic)
          ;; Github goes to firefox, but not gist
          ("http.*\/\/github.com" . browse-url-generic)
          ("groups.google.com" . browse-url-generic)
          ("docs.google.com" . browse-url-generic)
          ("melpa.org" . browse-url-generic)
          ("stackoverflow\.com" . browse-url-generic)
          ; ("t.co" . browse-url-generic)
          ("twitter.com" . browse-url-generic)
          ("youtube.com" . browse-url-generic)
          ("amazon.com" . browse-url-generic)
          ("slideshare.net" . browse-url-generic)
          ("." . eww-browse-url)))
  (setq shr-external-browser 'browse-url-generic)
  (setq browse-url-generic-program (executable-find "firefox"))
  (add-hook 'eww-mode-hook #'toggle-word-wrap)
  (add-hook 'eww-mode-hook #'visual-line-mode)
  (add-hook 'eww-mode-hook #'tool-bar-mode)
  :config
  (use-package eww-lnum
    :config
    (bind-key "f" #'eww-lnum-follow eww-mode-map)
    (bind-key "U" #'eww-lnum-universal eww-mode-map)))

(use-package link-hint)

(defun browse-last-url-in-brower ()
  (interactive)
  (save-excursion
    (ffap-next-url t t)))

(global-set-key (kbd "C-c u") 'browse-last-url-in-brower)
#+END_SRC

** Which key

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config (which-key-mode))
#+END_SRC

** Hydra

#+BEGIN_SRC emacs-lisp
    (require 'whitespace)
    (use-package hydra
      :config
      (defhydra hydra-toggle (:color pink)
        "
      _a_ abbrev-mode:      %`abbrev-mode
      _d_ debug-on-error:   %`debug-on-error
      _f_ auto-fill-mode:   %`auto-fill-function
      _t_ truncate-lines:   %`truncate-lines
      _v_ visual-line-mode: %`visual-line-mode
      _w_ whitespace-mode:  %`whitespace-mode
      "
      ("a" abbrev-mode nil)
      ("d" toggle-debug-on-error nil)
      ("f" auto-fill-mode nil)
      ("t" toggle-truncate-lines nil)
      ("v" visual-line-mode nil)
      ("w" whitespace-mode nil)
      ("q" nil "quit")))
#+END_SRC

** Avy, Ivy, and Counsel

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :commands (avy-goto-word-1))

  (use-package ivy
    :diminish ivy-mode
    :init
    (setq ivy-use-virtual-buffers t
          ivy-count-format "%d/%d ")
    :config
    (ivy-mode 1))

  (use-package counsel
    :diminish counsel-mode
    :config
    (counsel-mode))

  (use-package ivy-hydra
    :after (ivy hydra))

#+END_SRC

* Programming languages

#+BEGIN_SRC emacs-lisp

#+END_SRC

** 

* Keybindings

The General package is a very flexible package for defining key bindings.

#+BEGIN_SRC emacs-lisp
  (use-package general
    :commands general-define-key)
#+END_SRC

I use it to redefine a few default bindings.

#+BEGIN_SRC emacs-lisp
  (general-define-key
   "C-s"     'swiper
   "M-x"     'counsel-M-x)
#+END_SRC

I redifine =C-x=, =C-h=, and =f1= bindings to take advantage of =councel= 
and =ivy= packages.

#+BEGIN_SRC emacs-lisp
  (general-define-key
;   "C-x C-f"   'counsel-find-file
;   "C-x C-b"   'counsel-ibuffer
   "C-x b"     'ivy-switch-buffer
;   "C-x l"     'counsel-locate
;   "C-x C-f"   'counsel-find-file

;   "C-h f"     'counsel-describe-function
;   "C-h v"     'counsel-describe-variable
;   "C-h l"     'counsel-find-library
;   "C-h S"     'counsel-info-lookup-symbol
;   "C-h u"     'counsel-unicode-char

;   "<f1> f"    'counsel-describe-function
;   "<f1> v"    'counsel-describe-variable
;   "<f1> l"    'counsel-find-library
;   "<f1> S"    'counsel-info-lookup-symbol
   "<f1> u"    'counsel-unicode-char)
#+END_SRC

My =C-c= bindings 

#+BEGIN_SRC emacs-lisp
  (general-define-key
   :prefix "C-c"
   "g"   '(counsel-git :which-key "find file in git dir")
   "/"   'counsel-git-grep
   "k"   'counsel-ag
   "t"   'hydra-toggle/body

   "C-r" 'ivy-resume

   ;; binds to double key press
   "f"      '(:ignore t :which-key "files")
;   "ff"     'counsel-find-file    ; find file using ivy
   "fr"     'counsel-recentf      ; find recently edited files
   "fl"     'link-hint-open-link  ; open a link in a browser

   "p"      '(:ignore t :which-key "project")
   "pf"     '(counsel-git :which-key "find file in git dir"))
#+END_SRC




